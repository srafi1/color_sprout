import 'dart:math';

import 'package:color_sprout/game_colors.dart';

class LevelData {
  int gridSize;
  List<List<int>> start;
  List<List<int>> target;
  LevelData({this.gridSize, this.start, this.target});
}

class Levels {
  static List<LevelData> levels = [
    // 1
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, 0, -1, 0, -1],
          [-1, -1, 0, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
    ),
    // 2
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, 0, 0, 0, -1],
          [-1, 0, -1, 0, -1],
          [-1, -1, 0, -1, -1],
        ], 
    ),
    // 3
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, 0, 0, -1, -1],
          [0, 0, -1, 0, -1],
          [0, -1, 0, 0, -1],
          [-1, 0, 0, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
    ),
    // 4
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, -1, 0, -1, -1],
          [-1, 0, 0, 0, -1],
          [-1, 0, -1, 0, -1],
          [-1, 0, 0, 0, -1],
          [-1, -1, 0, -1, -1],
        ], 
    ),
    // 5
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, -1, 0, -1, -1],
          [-1, 0, 0, 0, -1],
          [0, 0, -1, 0, 0],
          [-1, 0, 0, 0, -1],
          [-1, -1, 0, -1, -1],
        ], 
    ),
    // 6
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, 1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, -1, 0, -1, -1],
          [-1, 0, -1, 0, -1],
          [-1, -1, 0, -1, -1],
          [-1, 1, -1, 1, -1],
          [-1, -1, 1, -1, -1],
        ], 
    ),
    // 7
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, 1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, 0, 0, -1, -1],
          [0, -1, 1, 0, -1],
          [-1, 1, -1, 1, -1],
          [1, -1, 1, 1, -1],
          [-1, 1, 1, -1, -1],
        ], 
    ),
    // 8
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, 1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, 0, 0, 0, -1],
          [0, 1, 0, -1, 0],
          [1, -1, 1, 0, -1],
          [-1, 1, 1, 1, -1],
          [-1, -1, 1, -1, -1],
        ], 
    ),
    // 9
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, 1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, 0, 0, 0, -1],
          [-1, 0, -1, 0, -1],
          [-1, 1, 1, 1, -1],
          [-1, 1, -1, 1, -1],
          [-1, 1, 1, 1, -1],
        ], 
    ),
    // 10
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, 1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [0, -1, 1, 0, -1],
          [1, 1, -1, 1, 0],
          [1, 1, 1, 1, -1],
          [-1, 1, 1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
    ),
    // 11
    LevelData(
        gridSize: 5,
        start: [
          [0, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, 1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, 2],
        ], 
        target: [
          [-1, 0, -1, -1, -1],
          [0, -1, 1, -1, -1],
          [-1, 1, -1, 1, -1],
          [-1, -1, 1, -1, 2],
          [-1, -1, -1, 2, -1],
        ], 
    ),
    // 12
    LevelData(
        gridSize: 5,
        start: [
          [0, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, 1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, 2],
        ], 
        target: [
          [0, -1, 0, -1, -1],
          [-1, 0, 1, 1, -1],
          [0, 1, 1, 2, 2],
          [-1, 1, 2, -1, 2],
          [-1, -1, 2, 2, 2],
        ], 
    ),
    // 13
    LevelData(
        gridSize: 5,
        start: [
          [0, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, 1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, 2],
        ], 
        target: [
          [0, 0, 0, -1, -1],
          [0, -1, 0, 1, -1],
          [0, 0, -1, 2, 2],
          [-1, 1, 2, -1, 2],
          [-1, -1, 2, 2, 2],
        ], 
    ),
    // 14
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, 2, -1, -1, -1],
          [-1, -1, 1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, -1, 0, 0, -1],
          [-1, 2, 0, -1, 0],
          [2, -1, 2, 1, -1],
          [-1, 2, 1, -1, 1],
          [-1, -1, 1, 1, -1],
        ], 
    ),
    // 15
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, 2, -1, -1, -1],
          [-1, -1, 1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, 0, -1, 0, -1],
          [-1, 2, 0, 0, -1],
          [2, -1, 2, -1, -1],
          [-1, 2, 1, 1, -1],
          [-1, 1, -1, 1, -1],
        ], 
    ),
    // 16
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, 2, -1, -1, -1],
          [-1, -1, 1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [0, -1, 2, -1, 0],
          [-1, 2, -1, 2, -1],
          [2, -1, 2, -1, 2],
          [-1, 2, -1, 2, -1],
          [1, -1, 2, -1, 1],
        ], 
    ),
    // 17
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, 1, -1],
          [-1, -1, 2, -1, -1],
          [-1, 0, -1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, 1, -1, 1, -1],
          [1, -1, 1, -1, 1],
          [-1, 0, 2, 1, -1],
          [0, -1, 0, -1, 0],
          [-1, 0, -1, 0, -1],
        ], 
    ),
    // 18
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, 1, -1],
          [-1, -1, 2, -1, -1],
          [-1, 0, -1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, -1, 1, -1, 1],
          [-1, 2, 2, 1, -1],
          [0, 2, -1, 2, 1],
          [-1, 0, 2, 2, -1],
          [0, -1, 0, -1, -1],
        ], 
    ),
  ];

  static List<LevelData> templates = [
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
    ),
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, 1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
    ),
    LevelData(
        gridSize: 5,
        start: [
          [-1, -1, -1, -1, -1],
          [-1, -1, 0, -1, -1],
          [-1, 2, -1, -1, -1],
          [-1, -1, 1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
        target: [
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
          [-1, -1, -1, -1, -1],
        ], 
    ),
  ];

  static LevelData loadLevel(int level) {
    return levels[level];
  }

  static LevelData randomLevel(int gridSize) {
    print("size: $gridSize");
    LevelData level = LevelData(
        gridSize: gridSize,
        start: List.generate(gridSize, (i) {
          return List.generate(gridSize, (i) {
            return -1;
          });
        }),
        target: List.generate(gridSize, (i) {
          return List.generate(gridSize, (i) {
            return -1;
          });
        })
    );

    Random rand = Random();
    int numStarting = rand.nextInt(GameColors.tileColors.length)+1;
    for (int i = 0; i < numStarting; i++) {
      int x = rand.nextInt(gridSize);
      int y = rand.nextInt(gridSize);
      while (level.start[y][x] != -1) {
        x = rand.nextInt(gridSize);
        y = rand.nextInt(gridSize);
      }
      level.start[y][x] = i;
    }

    print("random level start: $gridSize");
    level.start.sublist(0, level.start.length).forEach((row) {
      List<int> pr = row.sublist(0, row.length).map( (tile) {return tile;} ).toList();
      print("$pr,");
    });

    return level;
  }

  static LevelData loadTemplate(int template) {
    if (template < 0) {
      return randomLevel(-1*template);
    } else {
      return templates[template];
    }
  }

  static int maxLevel() {
    return levels.length - 1;
  }

  static int maxTemplate() {
    return templates.length - 1;
  }
}
